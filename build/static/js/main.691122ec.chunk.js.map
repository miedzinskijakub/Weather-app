{"version":3,"sources":["components/Form.js","components/Result.js","components/App.js","serviceWorker.js","index.js"],"names":["Form","props","type","autofocus","placeholder","value","onChange","change","Result","weather","err","city","temp","date","country","tempMin","tempMax","icon","icons","content","class","alt","src","className","App","state","handleInputChange","e","setState","target","prevProps","prevState","this","length","API","fetch","then","response","ok","Error","json","data","time","Date","toLocaleString","name","main","temp_max","temp_min","sys","catch","console","log","submit","handleCitySubmit","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"+RAeeA,G,KAXF,SAAAC,GACT,OACQ,2BAAOC,KAAK,OACZC,UAAU,OACVC,YAAY,uBACZC,MAAOJ,EAAMI,MACbC,SAAUL,EAAMM,WC6BbC,G,MAnCA,SAACP,GAAW,IAAD,EAEmDA,EAAMQ,QAAzEC,EAFgB,EAEhBA,IAAKC,EAFW,EAEXA,KAAMC,EAFK,EAELA,KAAMC,EAFD,EAECA,KAAMC,EAFP,EAEOA,QAASC,EAFhB,EAEgBA,QAASC,EAFzB,EAEyBA,QAASP,EAFlC,EAEkCA,QAASQ,EAF3C,EAE2CA,KAC/DC,EAAK,2CAAuCD,EAAvC,WAEHE,EAAU,KAoBd,OAlBIT,GAAOC,IAEPQ,EAIA,6BACI,wBAAIC,MAAM,QAAQT,EAAlB,KAA0BG,GAC1B,wBAAIM,MAAM,QAAQP,GAClB,wBAAIO,MAAM,QAAQR,EAAlB,UACA,wBAAIQ,MAAM,WAAWX,EAArB,KACA,yBAAKY,IAAI,OAAOC,IAAKJ,IACrB,wBAAIE,MAAM,WAAWL,EAArB,UAAuCC,EAAvC,UAOJ,yBAAKO,UAAU,UACVb,EAAG,GACJS,KCyFGK,E,4MAjHfC,MAAQ,CACNpB,MAAO,GACPS,QAAS,GACTD,KAAM,GACNF,KAAM,GACNC,KAAM,GACNH,QAAS,GACTM,QAAS,GACTC,QAAS,GACTC,KAAM,GACNP,IAAM,S,EAGRgB,kBAAoB,SAACC,GACjB,EAAKC,SAAS,CACZvB,MAAOsB,EAAEE,OAAOxB,S,iEA0CHyB,EAAWC,GAAW,IAAD,OAItC,GAA+B,IAA5BC,KAAKP,MAAMpB,MAAM4B,QACjBF,EAAU1B,QAAU2B,KAAKP,MAAMpB,MAAM,CAEtC,IAAM6B,EAAG,2DAAuDF,KAAKP,MAAMpB,MAAlE,kBAnEC,mCAmED,iBAEX8B,MAAMD,GACLE,MAAK,SAAAC,GACJ,GAAGA,EAASC,GACV,OAAOD,EAET,MAAME,MAAM,8BAEbH,MAAK,SAAAC,GAAQ,OAAIA,EAASG,UAC1BJ,MAAK,SAAAK,GACJ,IAAMC,GAAO,IAAIC,MAAOC,iBAExB,EAAKhB,UAAS,SAAAH,GAAK,MAAK,CACxBf,KAAK,EACLG,KAAM6B,EACN/B,KAAM8B,EAAKI,KACXjC,KAAM6B,EAAKK,KAAKlC,KAChBI,QAASyB,EAAKK,KAAKC,SACnBhC,QAAS0B,EAAKK,KAAKE,SACnBvC,QAASgC,EAAKhC,QAAQ,GAAGqC,KACzB7B,KAAMwB,EAAKhC,QAAQ,GAAGQ,KACtBH,QAAS2B,EAAKQ,IAAInC,eAGnBoC,OAAM,SAAAxC,GACLyC,QAAQC,IAAI1C,GACd,EAAKkB,UAAS,SAAAG,GAAS,MAAK,CACxBrB,KAAI,EACJC,KAAMoB,EAAU1B,gB,+BAOpB,OACE,yBAAKkB,UAAU,OACb,kBAAC,EAAD,CACAlB,MAAO2B,KAAKP,MAAMpB,MAClBE,OAAQyB,KAAKN,kBACb2B,OAAQrB,KAAKsB,mBACb,kBAAC,EAAD,CAAQ7C,QAASuB,KAAKP,a,GA3GV8B,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEdpB,OAAM,SAAAqB,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.691122ec.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\n\r\nconst Form = props => {\r\n    return (\r\n            <input type=\"text\"\r\n            autofocus=\"true\"\r\n            placeholder=\"Search for a city...\"\r\n            value={props.value}\r\n            onChange={props.change}\r\n            />\r\n     );\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport './Result.css';\r\n\r\n\r\nconst Result = (props) => {\r\n\r\n    const{err, city, temp, date, country, tempMin, tempMax, weather, icon} = props.weather;\r\nconst icons = `http://openweathermap.org/img/wn/${icon}@2x.png`\r\n\r\n    let content = null;\r\n\r\n    if(!err && city){\r\n\r\n        content = (\r\n\r\n\r\n\r\n        <div>\r\n            <h3 class=\"city\">{city}, {country}</h3>\r\n            <h4 class=\"date\">{date}</h4>\r\n            <h1 class=\"temp\">{temp} &#176;C</h1>\r\n            <h3 class=\"weather\">{weather} </h3>\r\n            <img alt=\"Icon\" src={icons}></img>\r\n            <h4 class=\"tempMin\">{tempMin}&#176; / {tempMax}&#176;</h4>\r\n  \r\n        </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"result\">\r\n            {err ? `` :\r\n            content}\r\n        </div>\r\n\r\n\r\n     );\r\n}\r\n\r\nexport default Result;","import React, { Component } from 'react';\nimport Form from './Form';\nimport Result from './Result';\nimport './App.css';\n//Klucz do Api\nconst APIKey ='1355db29be412c4bf1999ff232919774';\n\nclass App extends Component {\nstate = {\n  value: '',\n  country: '',\n  date: '',\n  city: '',\n  temp: '',\n  weather: '',\n  tempMin: '',\n  tempMax: '',\n  icon: '',\n  err : 'false',\n}\n\nhandleInputChange = (e) => {\n    this.setState({\n      value: e.target.value\n    })\n}\n\n// handleCitySubmit = (e) => {\n//   e.preventDefault();\n\n//   const API = `http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&appid=${APIKey}&units=metric`;\n\n// fetch(API)\n// .then(response => {\n//   if(response.ok){\n//     return response\n//   }\n//   throw Error(\"Nie udało się\")\n// }) //Spelniony\n// .then(response => response.json())\n// .then(data => {\n//   const time = new Date().toLocaleString()\n\n//   this.setState(state => ({\n//   err: false,\n//   date: time,\n//   city: state.value,\n//   sunrise: data.sys.sunrise,\n//   sunset: data.sys.sunset,\n//   temp: data.main.temp,\n//   pressure: data.main.pressure,\n//   wind: data.wind.speed,\n// }))\n// })\n// .catch(err => {\n//   console.log(err);\n// this.setState(prevState => ({\n//     err:true,\n//     city: prevState.value\n//     }))\n//   }) //Odrzucony\n\n\n// }\n\ncomponentDidUpdate(prevProps, prevState){\n  // console.log(prevState.value);\n  // console.log(this.state.value);\n\n  if(this.state.value.length === 0) return;\n  if(prevState.value !== this.state.value){\n    \n    const API = `http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&appid=${APIKey}&units=metric`;\n\n  fetch(API)\n  .then(response => {\n    if(response.ok){\n      return response\n    }\n    throw Error(\"Nie udało się\")\n  }) //Spelniony\n  .then(response => response.json())\n  .then(data => {\n    const time = new Date().toLocaleString()\n\n    this.setState(state => ({\n    err: false,\n    date: time,\n    city: data.name,\n    temp: data.main.temp,\n    tempMax: data.main.temp_max,\n    tempMin: data.main.temp_min,\n    weather: data.weather[0].main,\n    icon: data.weather[0].icon,\n    country: data.sys.country\n  }))\n  })\n  .catch(err => {\n    console.log(err);\n  this.setState(prevState => ({\n      err:true,\n      city: prevState.value\n      }))\n    }) //Odrzucony\n  }\n}\n\nrender() {\n  return (\n    <div className=\"App\">\n      <Form\n      value={this.state.value}\n      change={this.handleInputChange}\n      submit={this.handleCitySubmit}/>\n      <Result weather={this.state}/>\n\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}