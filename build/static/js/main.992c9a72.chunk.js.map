{"version":3,"sources":["components/Form.js","components/Result.js","components/App.js","serviceWorker.js","index.js"],"names":["Form","props","type","autoFocus","placeholder","value","onChange","change","Result","weather","err","city","temp","date","country","tempMin","tempMax","icon","icons","content","className","alt","src","App","state","handleInputChange","e","setState","target","prevProps","prevState","this","length","API","process","fetch","then","response","ok","Error","json","data","time","Date","toLocaleString","name","main","temp_max","temp_min","sys","catch","console","log","submit","handleCitySubmit","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"+RAeeA,G,KAXF,SAAAC,GACT,OACQ,2BAAOC,KAAK,OACZC,WAAS,EACTC,YAAY,uBACZC,MAAOJ,EAAMI,MACbC,SAAUL,EAAMM,WC0BbC,G,MAhCA,SAACP,GAAW,IAAD,EAEmDA,EAAMQ,QAAzEC,EAFgB,EAEhBA,IAAKC,EAFW,EAEXA,KAAMC,EAFK,EAELA,KAAMC,EAFD,EAECA,KAAMC,EAFP,EAEOA,QAASC,EAFhB,EAEgBA,QAASC,EAFzB,EAEyBA,QAASP,EAFlC,EAEkCA,QAASQ,EAF3C,EAE2CA,KAC/DC,EAAK,2CAAuCD,EAAvC,WAEHE,EAAU,KAkBd,OAhBIT,GAAOC,IAEPQ,EAEA,6BACI,wBAAIC,UAAU,QAAQT,EAAtB,KAA8BG,GAC9B,wBAAIM,UAAU,QAAQP,GACtB,wBAAIO,UAAU,QAAQR,EAAtB,UACA,wBAAIQ,UAAU,WAAWX,EAAzB,KACA,yBAAKY,IAAI,OAAOC,IAAKJ,IACrB,wBAAIE,UAAU,WAAWL,EAAzB,UAA2CC,EAA3C,UAOJ,yBAAKI,UAAU,UACVV,EAAG,GAAQS,KCqDTI,E,4MA3EfC,MAAQ,CACNnB,MAAO,GACPS,QAAS,GACTD,KAAM,GACNF,KAAM,GACNC,KAAM,GACNH,QAAS,GACTM,QAAS,GACTC,QAAS,GACTC,KAAM,GACNP,IAAM,S,EAERe,kBAAoB,SAACC,GACjB,EAAKC,SAAS,CACZtB,MAAOqB,EAAEE,OAAOvB,S,iEAIHwB,EAAWC,GAAW,IAAD,OAGtC,GAA+B,IAA5BC,KAAKP,MAAMnB,MAAM2B,QACjBF,EAAUzB,QAAU0B,KAAKP,MAAMnB,MAAM,CAItC,IAAM4B,EAAG,4DAAwDF,KAAKP,MAAMnB,MAAnE,kBA5BG6B,mCA4BH,iBAEXC,MAAMF,GACLG,MAAK,SAAAC,GACJ,GAAGA,EAASC,GACV,OAAOD,EAET,MAAME,MAAM,mBAEbH,MAAK,SAAAC,GAAQ,OAAIA,EAASG,UAC1BJ,MAAK,SAAAK,GACJ,IAAMC,GAAO,IAAIC,MAAOC,iBAExB,EAAKjB,UAAS,SAAAH,GAAK,MAAK,CACxBd,KAAK,EACLG,KAAM6B,EACN/B,KAAM8B,EAAKI,KACXjC,KAAM6B,EAAKK,KAAKlC,KAChBI,QAASyB,EAAKK,KAAKC,SACnBhC,QAAS0B,EAAKK,KAAKE,SACnBvC,QAASgC,EAAKhC,QAAQ,GAAGqC,KACzB7B,KAAMwB,EAAKhC,QAAQ,GAAGQ,KACtBH,QAAS2B,EAAKQ,IAAInC,eAGnBoC,OAAM,SAAAxC,GACLyC,QAAQC,IAAI1C,GACd,EAAKiB,UAAS,SAAAG,GAAS,MAAK,CACxBpB,KAAI,EACJC,KAAMmB,EAAUzB,gB,+BAOpB,OACE,yBAAKe,UAAU,OACb,kBAAC,EAAD,CACAf,MAAO0B,KAAKP,MAAMnB,MAClBE,OAAQwB,KAAKN,kBACb4B,OAAQtB,KAAKuB,mBACb,kBAAC,EAAD,CAAQ7C,QAASsB,KAAKP,a,GArEV+B,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEdpB,OAAM,SAAAqB,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.992c9a72.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\n\r\nconst Form = props => {\r\n    return (\r\n            <input type=\"text\"\r\n            autoFocus\r\n            placeholder=\"Search for a city...\"\r\n            value={props.value}\r\n            onChange={props.change}\r\n            />\r\n     );\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport './Result.css';\r\n\r\n\r\nconst Result = (props) => {\r\n\r\n    const{err, city, temp, date, country, tempMin, tempMax, weather, icon} = props.weather;\r\nconst icons = `http://openweathermap.org/img/wn/${icon}@2x.png`\r\n\r\n    let content = null;\r\n\r\n    if(!err && city){\r\n\r\n        content = (\r\n\r\n        <div>\r\n            <h3 className=\"city\">{city}, {country}</h3>\r\n            <h4 className=\"date\">{date}</h4>\r\n            <h1 className=\"temp\">{temp} &#176;C</h1>\r\n            <h3 className=\"weather\">{weather} </h3>\r\n            <img alt=\"Icon\" src={icons}></img>\r\n            <h4 className=\"tempMin\">{tempMin}&#176; / {tempMax}&#176;</h4>\r\n  \r\n        </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"result\">\r\n            {err ? `` : content}\r\n        </div>\r\n\r\n\r\n     );\r\n}\r\n\r\nexport default Result;","import React, { Component } from 'react';\r\nimport Form from './Form';\r\nimport Result from './Result';\r\nimport './App.css';\r\n\r\nconst API_KEY = process.env.REACT_APP_WEATHER_API_KEY;\r\nclass App extends Component {\r\nstate = {\r\n  value: '',\r\n  country: '',\r\n  date: '',\r\n  city: '',\r\n  temp: '',\r\n  weather: '',\r\n  tempMin: '',\r\n  tempMax: '',\r\n  icon: '',\r\n  err : 'false',\r\n}\r\nhandleInputChange = (e) => {\r\n    this.setState({\r\n      value: e.target.value\r\n    })\r\n}\r\n\r\ncomponentDidUpdate(prevProps, prevState){\r\n\r\n\r\n  if(this.state.value.length === 0) return;\r\n  if(prevState.value !== this.state.value){\r\n\r\n  \r\n \r\n    const API = `https://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&appid=${API_KEY}&units=metric`;\r\n\r\n  fetch(API)\r\n  .then(response => {\r\n    if(response.ok){\r\n      return response\r\n    }\r\n    throw Error(\"Can not find\")\r\n  }) \r\n  .then(response => response.json())\r\n  .then(data => {\r\n    const time = new Date().toLocaleString()\r\n\r\n    this.setState(state => ({\r\n    err: false,\r\n    date: time,\r\n    city: data.name,\r\n    temp: data.main.temp,\r\n    tempMax: data.main.temp_max,\r\n    tempMin: data.main.temp_min,\r\n    weather: data.weather[0].main,\r\n    icon: data.weather[0].icon,\r\n    country: data.sys.country\r\n  }))\r\n  })\r\n  .catch(err => {\r\n    console.log(err);\r\n  this.setState(prevState => ({\r\n      err:true,\r\n      city: prevState.value\r\n      }))\r\n    }) \r\n  }\r\n}\r\n\r\nrender() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Form\r\n      value={this.state.value}\r\n      change={this.handleInputChange}\r\n      submit={this.handleCitySubmit}/>\r\n      <Result weather={this.state}/>\r\n\r\n    </div>\r\n  );\r\n}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}